Exercício: CRUD de Produtos com Express e MySQL
Objetivo : Criar uma API REST para gerenciar um catálogo de produtos utilizando Node.js, Express e MySQL.

Passos:
1. Configuração Inicial
Crie um novo projeto Node.js e instale as seguintes dependências:

express
mysql2
body-parser
npm init -y
npm install express mysql2 body-parser
Configure uma conexão com o banco de dados MySQL.

Crie um banco de dados chamado catalogo_produtos.
Dentro desse banco, crie uma tabela produtoscom as seguintes colunas:
id(INT, INCREMENTO_AUTO, CHAVE PRIMÁRIA)
nome(VARRAR(255))
descricao(TEXTO)
preco(DECIMAL(10, 2))
2. Criar Endpoints (como 'URLS')
Crie os seguintes endpoints em sua API:

PUBLICAR/produtos
Este endpoint deve adicionar um novo produto ao banco de dados.

O corpo da requisição deve ser um JSON como os campos nome, descricao, e preco.

Exemplo de corpo da requisição:

{
  "nome": "Produto Exemplo",
  "descricao": "Descrição do produto exemplo",
  "preco": 99.90
}
PEGAR/produtos
Este endpoint deve retornar todos os produtos cadastrados no banco de dados.
A resposta deve ser um array de objetos JSON representando os produtos.
PEGAR/produtos/:id
Este endpoint deve retornar os detalhes de um produto específico, com base no idpassado na URL.
Se o produto não for encontrado, deverá retornar uma mensagem de erro.
COLOCAR/produtos/:id
Este endpoint deve atualizar as informações de um produto específico, com base no idpassado na URL.

O corpo da requisição deverá conter os campos que serão atualizados: nome, descricao, e preco.

Exemplo de corpo da requisição:

{
  "nome": "Produto Atualizado",
  "descricao": "Descrição atualizada do produto",
  "preco": 149.99
}
EXCLUIR/produtos/:id
Este endpoint deve excluir um produto específico com base no idpassado na URL.
Se o produto for excluído com sucesso, deverá retornar uma mensagem de confirmação.
3. Validação e Tratamento de Erros
Adicione validações para garantir que todos os campos obrigatórios ( nome, descricao, preco) sejam necessários ao adicionar ou atualizar um produto.
Implemente o tratamento de erros para responder corretamente em casos de:
Falhas na conexão com o banco de dados.
Tentativas de acesso a produtos que não existem.
4. Teste da API
Utilize o Postman para testar os endpoints da API.
-se de que todas as operações garantidas (CRUD) estão funcionando corretamente.
Entrega
Envie o link para o repositório GitHub onde o projeto foi desenvolvido.
-se de que o código está bem organizado e comentado.
Neste exercício você vai praticar a criação de uma API completa com funcionalidades de CRUD, enquanto consolida seus conhecimentos em Node.js, Express e MySQL.