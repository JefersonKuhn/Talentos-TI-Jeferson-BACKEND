/*import {Carro} from "./Carro"
import {Moto} from "./Moto"

let meuCarro:Carro =   new Carro('Palio', 2013, 'FIAT', 80)
let meuOutroCarro:Carro =  new Carro ('KA', 2012, 'Ford', 120)

let minhaMoto:Moto =  new Moto ('Titan', 2015, 'Honda')
let minhaOutraMoto:Moto =  new Moto ('YBR', 2020, 'Yamaha')

//Chamar os mètodos
meuCarro.abrirporta(4)
minhaMoto.darumgrau()

//Chamar os atributos
console.log(meuCarro.marca)
console.log(minhaMoto.ano)*/

//index.ts
import { Veiculo } from 'Herança_encapsulamento/Veiculo';
import { Carro } from 'Herança_encapsulamento/Carro';
import { Moto } from 'Herança_encapsulamento/Moto';
/*A função realizarAcao aceita um parâmetro do tipo Veiculo, que é a classe base. No entanto, você pode passar objetos de classes derivadas (Carro e Moto) como argumentos para essa função Isso é possível porque objetos das classes derivadas são tratados como objetos da classe base, graças ao polimorfismo.*/
function realizarAcao (veiculo: Veiculo) {
veiculo.ligar();
veiculo.desligar();
}
const meuCarro = new Carro();
const minhaMoto = new Moto();
realizarAcao (meuCarro); // Trata um objeto Carro como um Veiculo realizarAcao (minhaMoto); // Trata um objeto Moto como um Veiculo


/*import { Veiculo } from './Veiculo';
import { Carro } from './Carro';
import { Moto } from './Moto';
*A função realizarAcao aceita um parâmetro do tipo Veiculo, que é a classe base. No entanto, você pode passar objetos de classes derivadas (Carro e Moto) como argumentos para essa função. Isso é possível porque objetos das classes derivadas são tratados como objetos da classe base, graças ao polimorfismo.*/
/*function realizarAcao (veiculo: Veiculo) {
veiculo.ligar();
veiculo.desligar();
}
const meuCarro = new Carro();
const minhaMoto = new Moto();
realizarAcao (meuCarro); // Trata um objeto Carro como um Veiculo realizarAcao (minhaMoto); // Trata um objeto Moto como um Veiculo meuCarro.acelerar(); // Método específico de Carro minhaMoto.empinar(); // Método específico de Moto*/

